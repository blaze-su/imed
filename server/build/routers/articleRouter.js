'use strict';var __createBinding=this&&this.__createBinding||(Object.create?function(o,m,k,k2){if(k2===undefined)k2=k;Object.defineProperty(o,k2,{enumerable:true,get:function(){return m[k];}});}:function(o,m,k,k2){if(k2===undefined)k2=k;o[k2]=m[k];});var __setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(o,v){Object.defineProperty(o,'default',{enumerable:true,value:v});}:function(o,v){o['default']=v;});var __importStar=this&&this.__importStar||function(mod){if(mod&&mod.__esModule)return mod;var result={};if(mod!=null)for(var k in mod)if(Object.hasOwnProperty.call(mod,k))__createBinding(result,mod,k);__setModuleDefault(result,mod);return result;};Object.defineProperty(exports,'__esModule',{value:true});exports.articleRouter=void 0;const express_1=require('express');const bodyParser=__importStar(require('body-parser'));const _models_1=require('../models');const articleRouter=express_1.Router();exports.articleRouter=articleRouter;articleRouter.use(bodyParser.json());articleRouter.route('/articles/').get((req,res,next)=>{_models_1.Article.find({}).populate([{path:'fileId',model:_models_1.File},{path:'marksId',model:_models_1.Mark}]).then(article=>{res.json(article);},err=>next(err)).catch(err=>next(err));}).post((req,res,next)=>{_models_1.Article.create(req.body).then(article=>{res.json(article);},err=>next(err)).catch(err=>next(err));});articleRouter.route('/articles/:articleId').get((req,res,next)=>{_models_1.Article.findById(req.params.articleId).populate([{path:'marksId',model:_models_1.Mark},{path:'fileId',model:_models_1.File},{path:'chunks.image.fileId',model:_models_1.File}]).then(article=>{res.json(article);},err=>next(err)).catch(err=>next(err));}).put((req,res,next)=>{console.log(req.body);_models_1.Article.findById(req.params.articleId).then(model=>Object.assign(model,req.body)).then(model=>model.save()).then(article=>{res.json(article);},err=>next(err)).catch(err=>next(err));});articleRouter.route('/articles/:articleId/chunks/').post((req,res,next)=>{const {articleId}=req.params;const chunk=req.body;_models_1.Article.findById(articleId).then(model=>{if(model!==null){if(chunk.sort==0)chunk.sort=10+(model===null||model===void 0?void 0:model.chunks.length)*10;if(chunk.type='TITLE'){model.chunks=[...model.chunks,chunk];}if(chunk.type='PARAGRAPH'){model.chunks=[...model.chunks,chunk];}}return model;}).then(model=>model.save()).then(article=>{res.json(article);},err=>next(err)).catch(err=>next(err));});articleRouter.route('/articles/:articleId/chunks/move').put((req,res,next)=>{const {articleId}=req.params;const {chunkId,direction}=req.body;_models_1.Article.findById(articleId).then(article=>{if(article!==null){const chunkIndex=article.chunks.findIndex(item=>{if(item._id==chunkId)return true;return false;});if(chunkIndex>-1){switch(direction){case'UP':article.chunks[chunkIndex].sort=article.chunks[chunkIndex].sort-11;break;case'DOWN':article.chunks[chunkIndex].sort=article.chunks[chunkIndex].sort+11;break;}chunksSort(article.chunks);article.save();}}res.json(article);}).catch(err=>next(err));});const chunksSort=chunks=>{const arr=chunks.sort((a,b)=>a.sort-b.sort);return arr.map((item,index)=>{item.sort=10+10*index;return index;});};articleRouter.route('/articles/:articleId/chunks/:chunkId').put((req,res,next)=>{const {articleId,chunkId}=req.params;const chunk=req.body;_models_1.Article.findById(articleId).then(model=>{if(model!==null){model.chunks=model.chunks.map(item=>{if(item._id==chunkId){if(item.type=='TITLE')return Object.assign(item,chunk);if(item.type=='PARAGRAPH')return Object.assign(item,chunk);}return item;});}return model;}).then(model=>model===null||model===void 0?void 0:model.save()).then(model=>{return _models_1.Article.findById(articleId).populate([{path:'marksId',model:_models_1.Mark},{path:'fileId',model:_models_1.File},{path:'chunks.image.fileId',model:_models_1.File}]);}).then(article=>{res.json(article);},err=>next(err)).catch(err=>next(err));}).delete((req,res,next)=>{const {articleId,chunkId}=req.params;_models_1.Article.findById(articleId).then(model=>{if(model!==null){model.chunks=model.chunks.filter(chunk=>chunk._id!=chunkId);}return model;}).then(model=>model===null||model===void 0?void 0:model.save()).then(article=>{res.json(article);},err=>next(err)).catch(err=>next(err));});